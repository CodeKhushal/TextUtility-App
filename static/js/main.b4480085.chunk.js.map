{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","dist","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","htmlFor","role","placeholder","TextForm","_useState","useState","_useState2","Object","slicedToArray","fWord","findWord","_useState3","_useState4","rWord","replaceWord","_useState5","_useState6","text","setText","Fragment","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","toogle","textContent","innerHTML","cancel","aria-describedby","console","log","replaceAll","split","filter","n","length","About","color","backgroundColor","border","myStyle","setMyStyle","btnText","style","btnStyle","setBtnStyle","aria-labelledby","data-bs-parent","Alert","alert","class","modeType","word","lower","charAt","slice","capitalize","defaultProps","createBrowserHistory","basename","process","App","setmode","setAlert","message","mType","setTimeout","body","react_router_dist","exact","path","element","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.b4480085.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types' // props concept\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    // JSX\r\n    // Bootstrap\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> {/*Props*/}\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/TextUtility-App\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='dark' ? 'light':'dark'} m-2`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label me-2\" htmlFor=\"flexSwitchCheckDefault\">{`${props.mode==='dark' ? 'light':'dark'}`}</label>\r\n          </div>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className={`btn btn-outline-${props.mode==='dark' ? 'light':'dark'} type=\"submit\"`}>Search</button>\r\n            {/* success = green, primary = blue */}\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n// Property Types Set\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired\r\n}\r\n\r\n// default property set\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About text here'\r\n}","import React, { useState } from 'react' // state Concept\r\n\r\nexport default function TextForm(props) {\r\n    // event handler to convert text to Upper case\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\", \"success\", \"success\");\r\n    }\r\n\r\n    // event handler to convert text to lower case\r\n    const handleLowClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\", \"success\", \"success\");\r\n    }\r\n\r\n    // event handler for changing text\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"OnChange clicked\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    // event to handle clear text\r\n    const handleClearText = () => {\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared\", \"success\", \"success\");\r\n    }\r\n\r\n    // event to handle copy text\r\n    const handleCopyText = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied to clipboard!\", \"success\", \"success\");\r\n    }\r\n\r\n    // event handler for text to speech\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance(text);\r\n        window.speechSynthesis.speak(msg);\r\n        const toogle = document.getElementById('toggle')\r\n        if (toogle.textContent === \"Speak\") {\r\n            toogle.innerHTML = \"Stop\"\r\n        }\r\n        else {\r\n            toogle.innerHTML = \"Speak\"\r\n            if (toogle.innerHTML === \"Speak\") {\r\n                window.speechSynthesis.cancel()\r\n            }\r\n        }\r\n    }\r\n\r\n    const [fWord, findWord] = useState(\"\");\r\n    const [rWord, replaceWord] = useState(\"\");\r\n    const handlefindChange = (event) => {\r\n        findWord(event.target.value);\r\n    };\r\n    const handleReplaceChange = (event) => {\r\n        console.log(replaceWord(event.target.value));\r\n    };\r\n    const handleReplaceClick = () => {\r\n        let newText = text.replaceAll(fWord, rWord);\r\n        setText(newText);\r\n        props.showAlert(\"Replaced words!\", \"success\", \"success\");\r\n    };\r\n\r\n    // defining  two states text(it is a value) and setText(it is a function) and setting the text to default text\r\n    // using useState hook\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    {/* if value is changed the onChange event will call handleOnChange function */}\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"15\" placeholder='Enter your text here' ></textarea>\r\n                </div>\r\n\r\n                {/* if button is clicked the onClick event will call handleUpClick function */}\r\n                {/* button for uppercase */}\r\n                <button className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n\r\n                {/* button for lowercase */}\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n\r\n                {/* button for clear text */}\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleClearText}>Clear Text</button>\r\n\r\n                {/* button for copy text */}\r\n                <button className=\"btn btn-primary mx-2\" onClick={handleCopyText}>Copy Text</button>\r\n\r\n                {/* button for text to speech */}\r\n                <button className=\"btn btn-warning mx-2 my-2\" onClick={speak} id=\"toggle\">Speak</button>\r\n\r\n                {/* input for find word */}\r\n                <div className=\"input-group my-3\">\r\n                    <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Find Word</span>\r\n                    <input type=\"text\" className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" value={fWord} onChange={handlefindChange} id=\"myBox\" />\r\n                </div>\r\n\r\n                {/* input for replace word */}\r\n                <div className=\"input-group mb-3\">\r\n                    <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Replace Word</span>\r\n                    <input type=\"text\" className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" value={rWord} onChange={handleReplaceChange} id=\"myBox\" />\r\n                </div>\r\n\r\n                {/* <textarea className=\"form-control my-2\" value={fWord} onChange={handlefindChange} id=\"myBox\" rows=\"1\"></textarea>\r\n\r\n                    <textarea className=\"form-control my-2\" value={rWord} onChange={handleReplaceChange} id=\"myBox\" rows=\"1\"></textarea> */}\r\n\r\n                {/* button for replace word */}\r\n                <button className=\"btn btn-warning mx-2 my-2\" onClick={handleReplaceClick} id=\"toggle\">Replace Words</button>\r\n            </div>\r\n\r\n            <div className=\"container my-4\">\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(' ').filter(function (n) { return n !== '' }).length} words and {text.length} characters</p> {/* text.split(\" \").length*/}\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Enter text in textarea above to preview it here!\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setMyStyle] = useState({  // js object\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n        border: '1px solid black'\r\n    })\r\n\r\n    const [btnStyle, setBtnStyle] = useState({\r\n        btnText: \"Enable dark mode\",\r\n        style: \"btn btn-dark\"\r\n    })   \r\n\r\n    const toggleStyle = () => {\r\n        if(myStyle.color===\"white\"){\r\n            setMyStyle({\r\n                color: \"black\",\r\n                backgroundColor: \"white\",\r\n                border: '1px solid black'\r\n            })\r\n            setBtnStyle({\r\n                btnText: \"Enable dark mode\",\r\n                style: \"btn btn-dark\"\r\n            })\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color: \"white\",\r\n                backgroundColor: \"black\",\r\n                border: '1px solid white'\r\n            })\r\n            setBtnStyle({\r\n                btnText:\"Enable light mode\",\r\n                style: \"btn btn-light\"\r\n            })\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container m-4\" style={myStyle}>\r\n            <h2>About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <button onClick={toggleStyle} type=\"button\" className={btnStyle.style}>{btnStyle.btnText}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n// \"btn btn-dark\"Enable dark mode","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div class={`alert alert-${props.alert.modeType}`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport About from './components/About';\r\nimport Alert from './components/Alert';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n  // Link\r\n} from \"react-router-dom\";\r\n\r\nimport { createBrowserHistory } from 'history';\r\nexport const history = createBrowserHistory({\r\n    basename: process.env.PUBLIC_URL\r\n});\r\n\r\n\r\nfunction App() {\r\n  const [mode, setmode] = useState('light');\r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type, mType) => {\r\n    setAlert({\r\n      msg: message,\r\n      type: type,\r\n      modeType: mType\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  }\r\n\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setmode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      document.body.style.color = 'white';\r\n      showAlert(\"Dark mode has been enabled\", \"success\", \"primary\");\r\n    }\r\n    else {\r\n      setmode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      document.body.style.color = 'black';\r\n      showAlert(\"Light mode has been enabled\", \"success\", \"secondary\");\r\n    }\r\n  }\r\n  return (\r\n    <> {/*jsx fragment to return multiple tags*/}\r\n      <Router>\r\n        <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} /> {/* used props*/}\r\n        <Alert alert={alert} />\r\n        <div className=\"container my-3\">\r\n          <Routes>\r\n            {/* Concept of exact\r\n                /users --> Component 1 \r\n                /users/home --> Component 2 */}\r\n            <Route exact path=\"/\" element={<TextForm heading=\"Enter the text to analyze\" showAlert={showAlert} mode={mode} toggleMode={toggleMode} />}/>\r\n            <Route exact path=\"/about\" element={<About />}/>\r\n          </Routes>\r\n        </div>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);"],"sourceRoot":""}